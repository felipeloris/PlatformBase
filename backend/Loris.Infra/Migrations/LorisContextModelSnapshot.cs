// <auto-generated />
using System;
using Loris.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Loris.Infra.Migrations
{
    [DbContext(typeof(LorisContext))]
    partial class LorisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Loris.Entities.AuthResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Dictionary")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("dictionary");

                    b.HasKey("Id")
                        .HasName("auth_resource_pk");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("auth_resource_ix_code");

                    b.ToTable("auth_resource", "public");
                });

            modelBuilder.Entity("Loris.Entities.AuthRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("auth_role_pk");

                    b.ToTable("auth_role", "public");
                });

            modelBuilder.Entity("Loris.Entities.AuthRoleResource", b =>
                {
                    b.Property<int>("AuthRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("auth_role_id");

                    b.Property<int>("AuthResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("auth_resource_id");

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.Property<short>("Permissions")
                        .HasColumnType("smallint")
                        .HasColumnName("permissions");

                    b.HasKey("AuthRoleId", "AuthResourceId")
                        .HasName("auth_role_resource_pk");

                    b.HasIndex("AuthResourceId");

                    b.ToTable("auth_role_resource", "public");
                });

            modelBuilder.Entity("Loris.Entities.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.Property<DateTime?>("DtBlocked")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_blocked");

                    b.Property<DateTime?>("DtExpiredPwd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_expired_password");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("encrypted_password");

                    b.Property<string>("ExtenalId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("external_id");

                    b.Property<short>("Language")
                        .HasColumnType("smallint")
                        .HasColumnName("language");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("login_at");

                    b.Property<short>("LoginStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("login_status");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nickname");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<string>("TokenChangePwd")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("token_change_pwd");

                    b.Property<short>("WrondPwdAttempts")
                        .HasColumnType("smallint")
                        .HasColumnName("wrong_pwd_attempts");

                    b.HasKey("Id")
                        .HasName("auth_user_pk");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("auth_user_ix_email");

                    b.HasIndex("ExtenalId")
                        .IsUnique()
                        .HasDatabaseName("auth_user_ix_external_id");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasDatabaseName("auth_user_ix_nickname");

                    b.ToTable("auth_user", "public");
                });

            modelBuilder.Entity("Loris.Entities.AuthUserRole", b =>
                {
                    b.Property<int>("AuthRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("auth_role_id");

                    b.Property<int>("AuthUserId")
                        .HasColumnType("integer")
                        .HasColumnName("auth_user_id");

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.HasKey("AuthRoleId", "AuthUserId")
                        .HasName("auth_user_role_pk");

                    b.HasIndex("AuthUserId");

                    b.ToTable("auth_user_role", "public");
                });

            modelBuilder.Entity("Loris.Entities.CourierAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CourierMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("courier_message_id");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<short>("FileType")
                        .HasColumnType("smallint")
                        .HasColumnName("file_type");

                    b.HasKey("Id")
                        .HasName("courier_attachment_pk");

                    b.HasIndex("CourierMessageId");

                    b.ToTable("courier_attachment", "public");
                });

            modelBuilder.Entity("Loris.Entities.CourierMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("Action")
                        .HasColumnType("smallint")
                        .HasColumnName("action");

                    b.Property<int?>("CourierTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("courier_template_id");

                    b.Property<DateTime>("DtInclusion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_inclusion");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("from");

                    b.Property<short>("Generator")
                        .HasColumnType("smallint")
                        .HasColumnName("generator");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("courier_message_pk");

                    b.HasIndex("CourierTemplateId");

                    b.ToTable("courier_message", "public");
                });

            modelBuilder.Entity("Loris.Entities.CourierTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CtrlCreatedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_created_by");

                    b.Property<long?>("CtrlCreatedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_created_in");

                    b.Property<string>("CtrlModifiedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ctrl_modified_by");

                    b.Property<long?>("CtrlModifiedIn")
                        .HasColumnType("bigint")
                        .HasColumnName("ctrl_modified_in");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("external_id");

                    b.Property<short>("System")
                        .HasColumnType("smallint")
                        .HasColumnName("system");

                    b.Property<string>("SystemSenderIdent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("system_sender_ident");

                    b.Property<string>("Template")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("template_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("courier_template_pk");

                    b.ToTable("courier_template", "public");
                });

            modelBuilder.Entity("Loris.Entities.CourierTo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CourierMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("courier_message_id");

                    b.Property<DateTime>("LastProcessing")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_processing");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<short>("System")
                        .HasColumnType("smallint")
                        .HasColumnName("system");

                    b.Property<string>("SystemUserIdent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("system_user_ident");

                    b.HasKey("Id")
                        .HasName("courier_to_pk");

                    b.HasIndex("CourierMessageId");

                    b.ToTable("courier_to", "public");
                });

            modelBuilder.Entity("Loris.Entities.AuthRoleResource", b =>
                {
                    b.HasOne("Loris.Entities.AuthResource", "AuthResource")
                        .WithMany("AuthRoleResource")
                        .HasForeignKey("AuthResourceId")
                        .HasConstraintName("auth_role_resource_fk_auth_resource")
                        .IsRequired();

                    b.HasOne("Loris.Entities.AuthRole", "AuthRole")
                        .WithMany("AuthRoleResource")
                        .HasForeignKey("AuthRoleId")
                        .HasConstraintName("auth_role_resource_fk_auth_role")
                        .IsRequired();

                    b.Navigation("AuthResource");

                    b.Navigation("AuthRole");
                });

            modelBuilder.Entity("Loris.Entities.AuthUserRole", b =>
                {
                    b.HasOne("Loris.Entities.AuthRole", "AuthRole")
                        .WithMany("AuthUserRole")
                        .HasForeignKey("AuthRoleId")
                        .HasConstraintName("auth_user_role_fk_auth_role")
                        .IsRequired();

                    b.HasOne("Loris.Entities.AuthUser", "AuthUser")
                        .WithMany("AuthUserRole")
                        .HasForeignKey("AuthUserId")
                        .HasConstraintName("auth_user_role_fk_auth_user")
                        .IsRequired();

                    b.Navigation("AuthRole");

                    b.Navigation("AuthUser");
                });

            modelBuilder.Entity("Loris.Entities.CourierAttachment", b =>
                {
                    b.HasOne("Loris.Entities.CourierMessage", "CourierMessage")
                        .WithMany("Attachments")
                        .HasForeignKey("CourierMessageId")
                        .HasConstraintName("courier_attachment_fk_courier_message")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourierMessage");
                });

            modelBuilder.Entity("Loris.Entities.CourierMessage", b =>
                {
                    b.HasOne("Loris.Entities.CourierTemplate", "CourierTemplate")
                        .WithMany("Messages")
                        .HasForeignKey("CourierTemplateId")
                        .HasConstraintName("courier_message_fk_courier_template")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourierTemplate");
                });

            modelBuilder.Entity("Loris.Entities.CourierTo", b =>
                {
                    b.HasOne("Loris.Entities.CourierMessage", "CourierMessage")
                        .WithMany("To")
                        .HasForeignKey("CourierMessageId")
                        .HasConstraintName("courier_to_fk_courier_message")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourierMessage");
                });

            modelBuilder.Entity("Loris.Entities.AuthResource", b =>
                {
                    b.Navigation("AuthRoleResource");
                });

            modelBuilder.Entity("Loris.Entities.AuthRole", b =>
                {
                    b.Navigation("AuthRoleResource");

                    b.Navigation("AuthUserRole");
                });

            modelBuilder.Entity("Loris.Entities.AuthUser", b =>
                {
                    b.Navigation("AuthUserRole");
                });

            modelBuilder.Entity("Loris.Entities.CourierMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Loris.Entities.CourierTemplate", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
